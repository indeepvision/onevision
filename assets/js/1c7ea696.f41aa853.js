"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[5215],{232:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/add-description-variable_70-ecd5eb45c79ffb76e94b0a6d457191b5.png"},2247:(e,n,t)=>{t.d(n,{xA:()=>m,yg:()=>g});var i=t(4041);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},m=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},u=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),p=c(t),u=r,g=p["".concat(l,".").concat(u)]||p[u]||d[u]||o;return t?i.createElement(g,a(a({ref:n},m),{},{components:t})):i.createElement(g,a({ref:n},m))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[p]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<o;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8123:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=t(9575),r=(t(4041),t(2247));const o={sidebar_position:2},a="Comments",s={unversionedId:"programming/syntax/comments",id:"programming/syntax/comments",title:"Comments",description:"In OneVision Scripts, comments serve the same purpose as they do in Typescript and other programming languages",source:"@site/docs/programming/syntax/comments.md",sourceDirName:"programming/syntax",slug:"/programming/syntax/comments",permalink:"/onevision/docs/programming/syntax/comments",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"programming",previous:{title:"Language Rules",permalink:"/onevision/docs/programming/syntax/language-rules"},next:{title:"Conditions & Loops",permalink:"/onevision/docs/programming/flow-control/conditions-loops"}},l={},c=[{value:"Single-Line Comments",id:"single-line-comments",level:3},{value:"Multi-Line Comments",id:"multi-line-comments",level:3},{value:"Adding descriptions to definitions",id:"adding-descriptions-to-definitions",level:3}],m={toc:c},p="wrapper";function d(e){let{components:n,...o}=e;return(0,r.yg)(p,(0,i.A)({},m,o,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"comments"},"Comments"),(0,r.yg)("p",null,"In OneVision Scripts, comments serve the same purpose as they do in Typescript and other programming languages: they are non-executable text that you can include within your code to explain, clarify, or document different aspects of your codebase. TypeScript supports both single-line and multi-line comments. Here\u2019s how comments work in OneVision:"),(0,r.yg)("h3",{id:"single-line-comments"},"Single-Line Comments"),(0,r.yg)("p",null,"Single-line comments start with ",(0,r.yg)("inlineCode",{parentName:"p"},"//")," and continue until the end of the line. They are commonly used for brief explanations or annotations on a single line of code."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'// This is a single-line comment\nvar message: string = "Hello, OneVision!";\n')),(0,r.yg)("h3",{id:"multi-line-comments"},"Multi-Line Comments"),(0,r.yg)("p",null,"Multi-line comments, also known as block comments, begin with ",(0,r.yg)("inlineCode",{parentName:"p"},"/**")," and end with ",(0,r.yg)("inlineCode",{parentName:"p"},"*/"),". They can span multiple lines and are typically used for longer explanations or comments that cover multiple lines of code."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"/*\n  This is a multi-line comment.\n  It can span multiple lines and is useful for longer explanations.\n*/\nvar numberArray: number[] = [1, 2, 3, 4, 5];\n")),(0,r.yg)("h3",{id:"adding-descriptions-to-definitions"},"Adding descriptions to definitions"),(0,r.yg)("p",null,"Multi-line comments used right before a variable declaration can be used to add some description to the created element. In OneVision, hovering a variable will show the description defined for that variable. "),(0,r.yg)("p",null,"For example: "),(0,r.yg)("p",null,(0,r.yg)("img",{alt:"Alt text",src:t(232).A,width:"581",height:"315"})))}d.isMDXComponent=!0}}]);