"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[6613],{2247:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>c});var a=t(4041);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},y="mdxType",g={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),y=m(t),u=r,c=y["".concat(s,".").concat(u)]||y[u]||g[u]||i;return t?a.createElement(c,o(o({ref:n},p),{},{components:t})):a.createElement(c,o({ref:n},p))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=u;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[y]="string"==typeof e?e:r,o[1]=l;for(var m=2;m<i;m++)o[m]=t[m];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},8898:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>g,frontMatter:()=>i,metadata:()=>l,toc:()=>m});var a=t(9575),r=(t(4041),t(2247));const i={sidebar_position:4},o="Types",l={unversionedId:"vision-elements/types",id:"vision-elements/types",title:"Types",description:"Miscellaneous types for the Vision Elements library.",source:"@site/docs/vision-elements/4-types.md",sourceDirName:"vision-elements",slug:"/vision-elements/types",permalink:"/onevision/docs/vision-elements/types",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"visionElements",previous:{title:"Probability",permalink:"/onevision/docs/vision-elements/elements/probability"},next:{title:"Pixel format",permalink:"/onevision/docs/vision-elements/image/pixel-format"}},s={},m=[{value:"<code>EImageDisplay</code>",id:"eimagedisplay",level:3},{value:"<code>EImageDisplay</code>",id:"eimagedisplay-1",level:3}],p={toc:m},y="wrapper";function g(e){let{components:n,...t}=e;return(0,r.yg)(y,(0,a.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"types"},"Types"),(0,r.yg)("p",null,"Miscellaneous types for the Vision Elements library."),(0,r.yg)("h3",{id:"eimagedisplay"},(0,r.yg)("inlineCode",{parentName:"h3"},"EImageDisplay")),(0,r.yg)("p",null,"This enum controls how an ",(0,r.yg)("a",{parentName:"p",href:"./elements/image"},"Image")," element is displayed."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Auto")," - Automatically chooses the display mode based on the pixel format (only) of the image"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Mono")," - Grayscale image, multi-channel data is converted to single channel"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Color")," - RGB image when the data has more than 1 channel"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"R")," - Only the red channel is displayed"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"G")," - Only the green channel is displayed"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"B")," - Only the blue channel is displayed"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"TurboColormap")," - Turbo colormap, multi-channel data is converted to single channel"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"SolidGradient")," - Solid color with linear transparency"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"TurboGradient")," - Turbo colormap with linear transparency")),(0,r.yg)("h3",{id:"eimagedisplay-1"},(0,r.yg)("inlineCode",{parentName:"h3"},"EImageDisplay")),(0,r.yg)("p",null,"This enum controls how an ",(0,r.yg)("a",{parentName:"p",href:"./elements/image"},"Image")," element is normalized before it is displayed."),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Auto")," - Automatically chooses the normalization mode based on the pixel format (only) of the image"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"None")," - No normalization is applied"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Manual")," - The user must set the normalization values in separate props"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Probability")," - Normalization between 0 and 1"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"MinMax")," - Normalization between the minimum and maximum values of the image"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Max")," - Top normalization to the maximum value of the image"),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Min")," - Bottom normalization to the minimum value of the image")))}g.isMDXComponent=!0}}]);