"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[6483],{2247:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>g});var i=t(4041);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},o=Object.keys(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)t=o[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=i.createContext({}),c=function(e){var n=i.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return i.createElement(l.Provider,{value:n},e.children)},d="mdxType",y={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},m=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(t),m=r,g=d["".concat(l,".").concat(m)]||d[m]||y[m]||o;return t?i.createElement(g,a(a({ref:n},p),{},{components:t})):i.createElement(g,a({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,a=new Array(o);a[0]=m;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s[d]="string"==typeof e?e:r,a[1]=s;for(var c=2;c<o;c++)a[c]=t[c];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}m.displayName="MDXCreateElement"},4795:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>y,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var i=t(9575),r=(t(4041),t(2247));const o={sidebar_position:2},a="Containers",s={unversionedId:"vision-elements/basics/containers",id:"vision-elements/basics/containers",title:"Containers",description:"Auxiliary container types for vision elements and functions to convert from one container type to another.",source:"@site/docs/vision-elements/1_basics/2-containers.md",sourceDirName:"vision-elements/1_basics",slug:"/vision-elements/basics/containers",permalink:"/onevision/docs/vision-elements/basics/containers",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"visionElements",previous:{title:"Compare",permalink:"/onevision/docs/vision-elements/basics/compare"},next:{title:"Convert",permalink:"/onevision/docs/vision-elements/basics/convert"}},l={},c=[{value:"<code>treeFromList()</code>",id:"treefromlist",level:3},{value:"<code>treeFromDictionary()</code>",id:"treefromdictionary",level:3},{value:"<code>treeToList()</code>",id:"treetolist",level:3},{value:"<code>cloneTree()</code>",id:"clonetree",level:3},{value:"<code>cloneDictionary()</code>",id:"clonedictionary",level:3},{value:"<code>cloneList()</code>",id:"clonelist",level:3}],p={toc:c},d="wrapper";function y(e){let{components:n,...t}=e;return(0,r.yg)(d,(0,i.A)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"containers"},"Containers"),(0,r.yg)("p",null,"Auxiliary container types for vision elements and functions to convert from one container type to another."),(0,r.yg)("p",null,"Vision elements have the ability to express parent-child relations via the ",(0,r.yg)("inlineCode",{parentName:"p"},"parentId")," field. Using this information, it is possible to create a nested tree structure from a list of vision elements."),(0,r.yg)("p",null,"The basic container types are the following:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"List:")," Array of vision elements. Can be an heterogeneous list.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-onevision"},"type List = VisionElement[];\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Tree:")," Nested structure of vision elements that represents the parent-child relationships expressed by the ",(0,r.yg)("inlineCode",{parentName:"li"},"parentId")," field.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-onevision"},"interface TreeNode {\n    node: VisionElement;\n    children: Tree;\n}\ntype Tree = TreeNode[];\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"Dictionary:")," A pair of string ",(0,r.yg)("strong",{parentName:"li"},"tag")," and list of vision elements.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-onevision"},"type Dictionary = Record<string, VisionElement[]>;\n")),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("strong",{parentName:"li"},"DictionaryFlat:")," A pair of string ",(0,r.yg)("strong",{parentName:"li"},"tag")," and list of flat vision elements.")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-onevision"},"type DictionaryFlat = Record<string, IVisionElementFlat[]>;\n")),(0,r.yg)("h3",{id:"treefromlist"},(0,r.yg)("inlineCode",{parentName:"h3"},"treeFromList()")),(0,r.yg)("p",null,"Creates a tree structure from a list of vision elements. The tree structure is created based on the ",(0,r.yg)("inlineCode",{parentName:"p"},"parentId")," field of the vision elements."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-onevision"},"function treeFromList(list: VisionElement[]): Tree;\n")),(0,r.yg)("h3",{id:"treefromdictionary"},(0,r.yg)("inlineCode",{parentName:"h3"},"treeFromDictionary()")),(0,r.yg)("p",null,"Creates a tree structure from a dictionary of vision elements. The tree structure is created based on the ",(0,r.yg)("inlineCode",{parentName:"p"},"parentId")," field of the vision elements.\nThe string ",(0,r.yg)("strong",{parentName:"p"},"tag")," is not used, it is lost in the conversion."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-onevision"},"function treeFromDictionary(dict: Dictionary): Tree;\n")),(0,r.yg)("h3",{id:"treetolist"},(0,r.yg)("inlineCode",{parentName:"h3"},"treeToList()")),(0,r.yg)("p",null,"Returns a list of vision elements from a tree. The"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-onevision"},"function treeToList(tree: Tree): VisionElements[];\n")),(0,r.yg)("h3",{id:"clonetree"},(0,r.yg)("inlineCode",{parentName:"h3"},"cloneTree()")),(0,r.yg)("p",null,"Clone a tree, keeping the same nested structure. Creates new instances of the vision elements, with different ",(0,r.yg)("inlineCode",{parentName:"p"},"id")," and, as a consequence, different ",(0,r.yg)("inlineCode",{parentName:"p"},"parentId"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-onevision"},"function cloneTree(tree: Tree): Tree;\n")),(0,r.yg)("h3",{id:"clonedictionary"},(0,r.yg)("inlineCode",{parentName:"h3"},"cloneDictionary()")),(0,r.yg)("p",null,"Clone a dictionary, keeping the same string ",(0,r.yg)("strong",{parentName:"p"},"tags")," and the same parent-child relationships expressed by new ",(0,r.yg)("inlineCode",{parentName:"p"},"id")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"parentId")," fields. Creates new instances of the vision elements, with different ",(0,r.yg)("inlineCode",{parentName:"p"},"id")," and, as a consequence, different ",(0,r.yg)("inlineCode",{parentName:"p"},"parentId"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-onevision"},"function cloneDictionary(dict: Dictionary): Dictionary;\n")),(0,r.yg)("h3",{id:"clonelist"},(0,r.yg)("inlineCode",{parentName:"h3"},"cloneList()")),(0,r.yg)("p",null,"Clone a tree, keeping the same parent-child relationships expressed by new ",(0,r.yg)("inlineCode",{parentName:"p"},"id")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"parentId")," fields. Creates new instances of the vision elements, with different ",(0,r.yg)("inlineCode",{parentName:"p"},"id")," and, as a consequence, different ",(0,r.yg)("inlineCode",{parentName:"p"},"parentId"),"."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-onevision"},"function cloneList(list: VisionElement[]): VisionElement[];\n")))}y.isMDXComponent=!0}}]);