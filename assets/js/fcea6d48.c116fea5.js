"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[3114],{2247:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>u});var a=n(4041);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},y="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),y=p(n),m=r,u=y["".concat(o,".").concat(m)]||y[m]||g[m]||i;return n?a.createElement(u,l(l({ref:t},d),{},{components:n})):a.createElement(u,l({ref:t},d))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[y]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<i;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},5757:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>g,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var a=n(9575),r=(n(4041),n(2247));const i={sidebar_position:1},l="Arrays",s={unversionedId:"programming/variables-types/arrays",id:"programming/variables-types/arrays",title:"Arrays",description:"In OneVision Scripts, lists are used to store collections of elements. They are intended to hold elements of the same type, but you could also store multiple types using the any type . Here\u2019s how you define lists in OneVision:",source:"@site/docs/programming/variables-types/arrays.md",sourceDirName:"programming/variables-types",slug:"/programming/variables-types/arrays",permalink:"/onevision/docs/programming/variables-types/arrays",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"programming",previous:{title:"Variables",permalink:"/onevision/docs/programming/variables-types/variables"},next:{title:"Objects",permalink:"/onevision/docs/programming/variables-types/objects"}},o={},p=[{value:"Array Declaration",id:"array-declaration",level:3},{value:"Array Initialization",id:"array-initialization",level:3},{value:"Accessing array elements",id:"accessing-array-elements",level:3},{value:"Nested lists",id:"nested-lists",level:3},{value:"Array methods and properties",id:"array-methods-and-properties",level:3},{value:"Array properties",id:"array-properties",level:4},{value:"Mutator methods",id:"mutator-methods",level:4},{value:"Accessor Methods",id:"accessor-methods",level:4}],d={toc:p},y="wrapper";function g(e){let{components:t,...n}=e;return(0,r.yg)(y,(0,a.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("h1",{id:"arrays"},"Arrays"),(0,r.yg)("p",null,"In OneVision Scripts, lists are used to store collections of elements. They are intended to hold elements of the same type, but you could also store multiple types using the ",(0,r.yg)("inlineCode",{parentName:"p"},"any")," type . Here\u2019s how you define lists in OneVision:"),(0,r.yg)("h3",{id:"array-declaration"},"Array Declaration"),(0,r.yg)("p",null,"You can declare a list by specifying the type of elements it will hold followed by ",(0,r.yg)("inlineCode",{parentName:"p"},"[]"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'// list of numbers\nvar numbers: number[] = [];\n\n// list of strings\nvar fruits: string[] = [];\n\n// list of mixed types\nvar mixedList: any[] = [1, "Hello", true]; \n')),(0,r.yg)("h3",{id:"array-initialization"},"Array Initialization"),(0,r.yg)("p",null,"Arrays can be initialized with elements enclosed in square brackets ",(0,r.yg)("inlineCode",{parentName:"p"},"[]"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'var numbers: number[] = [1, 2, 3, 4, 5];\nvar fruits: string[] = ["Apple", "Banana", "Cherry"];\n')),(0,r.yg)("p",null,"As explained, OneVision can infer the type in most cases when the initial value has a unique type: "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'// Array of numbers\nvar numbers = [1, 2, 3, 4, 5]; // variable numbers is initialized with number[] type\n\n// Array of strings\nvar fruits = ["Apple", "Banana", "Cherry"]; // variable fruits is initialized with string[] type\n')),(0,r.yg)("h3",{id:"accessing-array-elements"},"Accessing array elements"),(0,r.yg)("p",null,"You can access elements of an array using their zero-based index:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},'var fruits: string[] = ["Apple", "Banana", "Cherry"];\n\nfruits[0]; // Output: "Apple"\nfruits[1]; // Output: "Banana"\nfruits[2]; // Output: "Cherry"\n')),(0,r.yg)("h3",{id:"nested-lists"},"Nested lists"),(0,r.yg)("p",null,"Nested lists, also known as multidimensional lists, are lists that contain other lists as their elements. These are useful for representing complex data structures like matrices, grids, or any data that naturally fits into a table-like format."),(0,r.yg)("p",null,"You can easily define nested lists as: "),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-typescript"},"var matrix: number[][]= [[1,2,3], [4,5,6], [7,8,9]]; \nvar value = matrix[1][2];  // value = 6\n")),(0,r.yg)("h3",{id:"array-methods-and-properties"},"Array methods and properties"),(0,r.yg)("p",null,"Lists in OneVision are very similar to Typescript and come with built-in methods and properties for manipulating and accessing their elements. Some common methods include ",(0,r.yg)("inlineCode",{parentName:"p"},"push"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"pop"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"splice"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"concat"),", etc."),(0,r.yg)("h4",{id:"array-properties"},"Array properties"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Returned Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"length")),(0,r.yg)("td",{parentName:"tr",align:null},"Returns or sets the number of elements in an array."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"number"))))),(0,r.yg)("h4",{id:"mutator-methods"},"Mutator methods"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Method"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Returned Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"push(item: T): number")),(0,r.yg)("td",{parentName:"tr",align:null},"Adds one element to the end of the list and returns the new length."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"number"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"pop(): T \\| undefined")),(0,r.yg)("td",{parentName:"tr",align:null},"Removes the last element from the list and returns it, or ",(0,r.yg)("inlineCode",{parentName:"td"},"undefined")," if the list is empty."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"T \\| undefined"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"shift(): T \\| undefined")),(0,r.yg)("td",{parentName:"tr",align:null},"Removes the first element from the list and returns it, or ",(0,r.yg)("inlineCode",{parentName:"td"},"undefined")," if the list is empty."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"T \\| undefined"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"unshift(item: T): number")),(0,r.yg)("td",{parentName:"tr",align:null},"Adds one element to the beginning of the list and returns the new length."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"number"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"splice(start: number, deleteCount: number): T[]")),(0,r.yg)("td",{parentName:"tr",align:null},"Changes the contents of a list by removing existing elements returning the deleted elements"),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"T[]"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"sort(): this")),(0,r.yg)("td",{parentName:"tr",align:null},"Sorts the elements of a list in place and returns the list."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"this"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"reverse(): T[]")),(0,r.yg)("td",{parentName:"tr",align:null},"Reverses the order of the elements in the list in place and returns the list."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"T[]"))))),(0,r.yg)("h4",{id:"accessor-methods"},"Accessor Methods"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Method"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"),(0,r.yg)("th",{parentName:"tr",align:null},"Returned Type"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"concat(items: T[]): T[]")),(0,r.yg)("td",{parentName:"tr",align:null},"Returns a new list that is a shallow copy of the original list with additional elements concatenated."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"T[]"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"includes(searchElement: T, fromIndex?: number): boolean")),(0,r.yg)("td",{parentName:"tr",align:null},"Determines whether a list includes a certain element, returning ",(0,r.yg)("inlineCode",{parentName:"td"},"true")," or ",(0,r.yg)("inlineCode",{parentName:"td"},"false")," as appropriate."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"boolean"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"slice(start: number, end?: number): T[]")),(0,r.yg)("td",{parentName:"tr",align:null},"Returns a shallow copy of a portion of a list into a new list object selected from ",(0,r.yg)("inlineCode",{parentName:"td"},"start")," to ",(0,r.yg)("inlineCode",{parentName:"td"},"end")," (",(0,r.yg)("inlineCode",{parentName:"td"},"end")," not included)."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"T[]"))),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"toString(): string")),(0,r.yg)("td",{parentName:"tr",align:null},"Returns a string representing the specified list and its elements."),(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"string"))))))}g.isMDXComponent=!0}}]);