"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[8807],{2247:(e,t,n)=>{n.d(t,{xA:()=>l,yg:()=>b});var r=n(4041);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=p(n),y=a,b=m["".concat(c,".").concat(y)]||m[y]||u[y]||i;return n?r.createElement(b,o(o({ref:t},l),{},{components:n})):r.createElement(b,o({ref:t},l))}));function b(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=y;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s[m]="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8543:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(9575),a=(n(4041),n(2247));const i={sidebar_position:2},o="Objects",s={unversionedId:"programming/variables-types/objects",id:"programming/variables-types/objects",title:"Objects",description:"In OneVision, you can also create static dictionaries. This can have any key-value pair and they can be accessed as properties of the object:",source:"@site/docs/programming/variables-types/objects.md",sourceDirName:"programming/variables-types",slug:"/programming/variables-types/objects",permalink:"/onevision/docs/programming/variables-types/objects",draft:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"programming",previous:{title:"Arrays",permalink:"/onevision/docs/programming/variables-types/arrays"},next:{title:"Interfaces",permalink:"/onevision/docs/programming/variables-types/interfaces"}},c={},p=[],l={toc:p},m="wrapper";function u(e){let{components:t,...n}=e;return(0,a.yg)(m,(0,r.A)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.yg)("h1",{id:"objects"},"Objects"),(0,a.yg)("p",null,"In OneVision, you can also create static dictionaries. This can have any key-value pair and they can be accessed as properties of the object: "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'var obj = {\n    item1: 1, \n    item2: 22\n}; \nvar itemNumber = obj.item1; // itemNumber = 1\n\n// Alternatively\nvar obj = {\n    "item1": 1, \n    "item2": 22\n}; \n\nvar itemNumber = obj["item2"]; // itemNumber = 22\n\n')),(0,a.yg)("p",null,"This statically typed objects are useful to create complex datatypes to share data between multiple sequences. Using static dictionaries, you can create objects with different types: "),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-typescript"},'var obj = {\n    "item1": 1, \n    "item2": 22, \n    "item32": "asd"\n}; \nvar itemNumber = obj.item1; // itemNumber = 1\nvar itemString = obj.item32; // itemString = "asd"\n\n// Correct modification\nobj.item1 = 321; // Value of obj.item1 changed to 321\n\n// Error changing type\n// obj.item32 = 321; // Cannot cast number to string\n\n')),(0,a.yg)("p",null,"Note the type is inferred by OneVision, so the dictionary definition cannot be changed."))}u.isMDXComponent=!0}}]);