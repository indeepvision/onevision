"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[5362],{2247:(e,n,o)=>{o.d(n,{xA:()=>f,yg:()=>g});var t=o(4041);function i(e,n,o){return n in e?Object.defineProperty(e,n,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[n]=o,e}function l(e,n){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),o.push.apply(o,t)}return o}function a(e){for(var n=1;n<arguments.length;n++){var o=null!=arguments[n]?arguments[n]:{};n%2?l(Object(o),!0).forEach((function(n){i(e,n,o[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):l(Object(o)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(o,n))}))}return e}function r(e,n){if(null==e)return{};var o,t,i=function(e,n){if(null==e)return{};var o,t,i={},l=Object.keys(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||(i[o]=e[o]);return i}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(t=0;t<l.length;t++)o=l[t],n.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(i[o]=e[o])}return i}var s=t.createContext({}),c=function(e){var n=t.useContext(s),o=n;return e&&(o="function"==typeof e?e(n):a(a({},n),e)),o},f=function(e){var n=c(e.components);return t.createElement(s.Provider,{value:n},e.children)},d="mdxType",v={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},m=t.forwardRef((function(e,n){var o=e.components,i=e.mdxType,l=e.originalType,s=e.parentName,f=r(e,["components","mdxType","originalType","parentName"]),d=c(o),m=i,g=d["".concat(s,".").concat(m)]||d[m]||v[m]||l;return o?t.createElement(g,a(a({ref:n},f),{},{components:o})):t.createElement(g,a({ref:n},f))}));function g(e,n){var o=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var l=o.length,a=new Array(l);a[0]=m;var r={};for(var s in n)hasOwnProperty.call(n,s)&&(r[s]=n[s]);r.originalType=e,r[d]="string"==typeof e?e:i,a[1]=r;for(var c=2;c<l;c++)a[c]=o[c];return t.createElement.apply(null,a)}return t.createElement.apply(null,o)}m.displayName="MDXCreateElement"},9671:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>v,frontMatter:()=>l,metadata:()=>r,toc:()=>c});var t=o(9575),i=(o(4041),o(2247));const l={sidebar_position:3},a="Convert",r={unversionedId:"vision-elements/basics/convert",id:"vision-elements/basics/convert",title:"Convert",description:"Vision elements have what is called the flat representation, which is a data layout designed for exporting the element. If you want to export the element into a custom-designed file format, you will probably first want to convert it to flat, and then save each of the fields of the flat object to the file.",source:"@site/docs/vision-elements/1_basics/3-convert.md",sourceDirName:"vision-elements/1_basics",slug:"/vision-elements/basics/convert",permalink:"/onevision/docs/vision-elements/basics/convert",draft:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"visionElements",previous:{title:"Containers",permalink:"/onevision/docs/vision-elements/basics/containers"},next:{title:"Copy",permalink:"/onevision/docs/vision-elements/basics/copy"}},s={},c=[{value:"Conversion to flat",id:"conversion-to-flat",level:2},{value:"<code>veToFlat()</code>",id:"vetoflat",level:3},{value:"<code>listToFlat()</code>",id:"listtoflat",level:3},{value:"<code>dictionaryToFlat()</code>",id:"dictionarytoflat",level:3},{value:"Conversion from flat",id:"conversion-from-flat",level:2},{value:"<code>veFromFlat()</code>",id:"vefromflat",level:3},{value:"<code>listFromFlat()</code>",id:"listfromflat",level:3},{value:"<code>dictionaryFromFlat()</code>",id:"dictionaryfromflat",level:3},{value:"Conversion to JSON",id:"conversion-to-json",level:2},{value:"<code>veToJson()</code>",id:"vetojson",level:3},{value:"<code>flatToJson()</code>",id:"flattojson",level:3},{value:"<code>listToJson()</code>",id:"listtojson",level:3},{value:"<code>dictionaryToJson()</code>",id:"dictionarytojson",level:3},{value:"Conversion from JSON",id:"conversion-from-json",level:2},{value:"<code>veFromJson()</code>",id:"vefromjson",level:3},{value:"<code>flatFromJson()</code>",id:"flatfromjson",level:3},{value:"<code>listFromJson()</code>",id:"listfromjson",level:3},{value:"<code>dictionaryFromJson()</code>",id:"dictionaryfromjson",level:3},{value:"Conversion to file",id:"conversion-to-file",level:2},{value:"<code>veToFile()</code>",id:"vetofile",level:3},{value:"<code>flatToFile()</code>",id:"flattofile",level:3},{value:"<code>listToFile()</code>",id:"listtofile",level:3},{value:"<code>flatToFile()</code>",id:"flattofile-1",level:3},{value:"Conversion from file",id:"conversion-from-file",level:2},{value:"<code>veFromFile()</code>",id:"vefromfile",level:3},{value:"<code>flatFromFile()</code>",id:"flatfromfile",level:3},{value:"<code>listFromFile()</code>",id:"listfromfile",level:3},{value:"<code>dictionaryFromFile()</code>",id:"dictionaryfromfile",level:3}],f={toc:c},d="wrapper";function v(e){let{components:n,...o}=e;return(0,i.yg)(d,(0,t.A)({},f,o,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"convert"},"Convert"),(0,i.yg)("p",null,"Vision elements have what is called the ",(0,i.yg)("strong",{parentName:"p"},"flat")," representation, which is a data layout designed for exporting the element. If you want to export the element into a custom-designed file format, you will probably first want to convert it to flat, and then save each of the fields of the flat object to the file."),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Ve ","\u2192"," Flat ","\u2192"," Custom file format:")," Convert to flat, then save the flat representation with a custom-made file format.")),(0,i.yg)("p",null,"The following operations are equivalent in terms of the result:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Ve ","\u2192"," Flat ","\u2192"," JSON string ","\u2192"," JSON file:")," Convert to flat, convert the flat object to JSON (string), then save the JSON string to a file."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Ve ","\u2192"," JSON string ","\u2192"," JSON file:")," Convert directly to JSON (string), save the JSON string to a file."),(0,i.yg)("li",{parentName:"ul"},(0,i.yg)("strong",{parentName:"li"},"Ve ","\u2192"," JSON file:")," Use a built-in function to save the vision element to a file.")),(0,i.yg)("p",null,"The flat object has the following characteristics:"),(0,i.yg)("ul",null,(0,i.yg)("li",{parentName:"ul"},"All data is accessible through ",(0,i.yg)("strong",{parentName:"li"},"first-level fields"),' (thus the name "flat").'),(0,i.yg)("li",{parentName:"ul"},"It contains exactly the same data as the original vision element and the ",(0,i.yg)("strong",{parentName:"li"},"conversions are reversible"),': A converstion "to flat" and then "from flat" will result in the same vision element.'),(0,i.yg)("li",{parentName:"ul"},"It is directly convertable to JSON: Converting a vision element to flat, and the the flat object to JSON will have the same result as converting the vision element directly to JSON."),(0,i.yg)("li",{parentName:"ul"},"Cannot be used in the functions of the vision elements library. It has to be first converted back to a vision element.")),(0,i.yg)("h2",{id:"conversion-to-flat"},"Conversion to flat"),(0,i.yg)("h3",{id:"vetoflat"},(0,i.yg)("inlineCode",{parentName:"h3"},"veToFlat()")),(0,i.yg)("p",null,"Conversion of a vision element to flat object."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function veToFlat(ve: VisionElement): IVisionElementFlat;\n")),(0,i.yg)("h3",{id:"listtoflat"},(0,i.yg)("inlineCode",{parentName:"h3"},"listToFlat()")),(0,i.yg)("p",null,"Conversion of a list of vision elements to flat."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function listToFlat(veList: VisionElement[]): IVisionElementFlat[];\n")),(0,i.yg)("h3",{id:"dictionarytoflat"},(0,i.yg)("inlineCode",{parentName:"h3"},"dictionaryToFlat()")),(0,i.yg)("p",null,"Conversion of a dictionary of vision elements to flat."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function dictionaryToFlat(dict: Dictionary): DictionaryFlat;\n")),(0,i.yg)("h2",{id:"conversion-from-flat"},"Conversion from flat"),(0,i.yg)("h3",{id:"vefromflat"},(0,i.yg)("inlineCode",{parentName:"h3"},"veFromFlat()")),(0,i.yg)("p",null,"Conversion of a flat object to a vision element."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function veFromFlat(flat: IVisionElementFlat): IVisionElementFlat;\n")),(0,i.yg)("h3",{id:"listfromflat"},(0,i.yg)("inlineCode",{parentName:"h3"},"listFromFlat()")),(0,i.yg)("p",null,"Conversion of a list of flat objects to a list of vision elements."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function listFromFlat(flatList: IVisionElementFlat[]): IVisionElement[];\n")),(0,i.yg)("h3",{id:"dictionaryfromflat"},(0,i.yg)("inlineCode",{parentName:"h3"},"dictionaryFromFlat()")),(0,i.yg)("p",null,"Conversion of a dictionary of flat objects to a dictionary of vision elements."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function dictionaryFromFlat(flatDict: DictionaryFlat[]): IVisionElementFlat[];\n")),(0,i.yg)("h2",{id:"conversion-to-json"},"Conversion to JSON"),(0,i.yg)("h3",{id:"vetojson"},(0,i.yg)("inlineCode",{parentName:"h3"},"veToJson()")),(0,i.yg)("p",null,"Conversion of a vision element to a JSON string."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function veToJson(ve: VisionElement): string;\n")),(0,i.yg)("h3",{id:"flattojson"},(0,i.yg)("inlineCode",{parentName:"h3"},"flatToJson()")),(0,i.yg)("p",null,"Conversion of a flat object to a JSON string."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function flatToJson(flat: IVisionElementFlat): string;\n")),(0,i.yg)("h3",{id:"listtojson"},(0,i.yg)("inlineCode",{parentName:"h3"},"listToJson()")),(0,i.yg)("p",null,"Conversion of a list of vision elements to a JSON string."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function listToJson(veList: VisionElement[]): string;\n")),(0,i.yg)("h3",{id:"dictionarytojson"},(0,i.yg)("inlineCode",{parentName:"h3"},"dictionaryToJson()")),(0,i.yg)("p",null,"Conversion of a dictionary of vision elements to a JSON string."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function dictionaryToJson(dict: Dictionary): string;\n")),(0,i.yg)("h2",{id:"conversion-from-json"},"Conversion from JSON"),(0,i.yg)("h3",{id:"vefromjson"},(0,i.yg)("inlineCode",{parentName:"h3"},"veFromJson()")),(0,i.yg)("p",null,"Parses a JSON string to a vision element. If the string is not a valid JSON or a not a valid vision element, an error is thrown."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function veFromJson(json: string): VisionElement;\n")),(0,i.yg)("h3",{id:"flatfromjson"},(0,i.yg)("inlineCode",{parentName:"h3"},"flatFromJson()")),(0,i.yg)("p",null,"Parses a JSON string to flat value. If the string is not a valid JSON or a not a valid flat value, an error is thrown."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function flatFromJson(json: string): IVisionElementFlat;\n")),(0,i.yg)("h3",{id:"listfromjson"},(0,i.yg)("inlineCode",{parentName:"h3"},"listFromJson()")),(0,i.yg)("p",null,"Parses a JSON string to a list of vision elements. If the string is not a valid JSON or a not a valid list of vision elements, an error is thrown."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function listFromJson(json: string): VisionElement[];\n")),(0,i.yg)("h3",{id:"dictionaryfromjson"},(0,i.yg)("inlineCode",{parentName:"h3"},"dictionaryFromJson()")),(0,i.yg)("p",null,"Parses a JSON string to a dictionary of vision elements. If the string is not a valid JSON or a not a valid dictionary of vision elements, an error is thrown."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function dictionaryFromJson(json: string): Dictionary;\n")),(0,i.yg)("h2",{id:"conversion-to-file"},"Conversion to file"),(0,i.yg)("h3",{id:"vetofile"},(0,i.yg)("inlineCode",{parentName:"h3"},"veToFile()")),(0,i.yg)("p",null,"Writes a single vision element to a file (data is internally stored as JSON)."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function veToFile(ve: VisionElement, filePath: string): void;\n")),(0,i.yg)("h3",{id:"flattofile"},(0,i.yg)("inlineCode",{parentName:"h3"},"flatToFile()")),(0,i.yg)("p",null,"Writes a single flat object to a file (data is internally stored as JSON)."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function flatToFile(float: IVisionElementFlat, filePath: string): void;\n")),(0,i.yg)("h3",{id:"listtofile"},(0,i.yg)("inlineCode",{parentName:"h3"},"listToFile()")),(0,i.yg)("p",null,"Writes a list of vision elements to file (data is internally stored as JSON)."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function listToFile(veList: VisionElement[], filePath: string): void;\n")),(0,i.yg)("h3",{id:"flattofile-1"},(0,i.yg)("inlineCode",{parentName:"h3"},"flatToFile()")),(0,i.yg)("p",null,"Writes a dictionary of vision elements to file (data is internally stored as JSON)."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function dictionaryToFile(dict: Dictionary, filePath: string): void;\n")),(0,i.yg)("h2",{id:"conversion-from-file"},"Conversion from file"),(0,i.yg)("h3",{id:"vefromfile"},(0,i.yg)("inlineCode",{parentName:"h3"},"veFromFile()")),(0,i.yg)("p",null,"Reads a single vision element from file. If the file doesn't contain a valid vision element, an error is thrown."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function veFromFile(filePath: string): VisionElement;\n")),(0,i.yg)("h3",{id:"flatfromfile"},(0,i.yg)("inlineCode",{parentName:"h3"},"flatFromFile()")),(0,i.yg)("p",null,"Reads a single flat object from file. If the file doesn't contain a valid flat object, an error is thrown."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function flatFromFile(filePath: string): IVisionElementFlat;\n")),(0,i.yg)("h3",{id:"listfromfile"},(0,i.yg)("inlineCode",{parentName:"h3"},"listFromFile()")),(0,i.yg)("p",null,"Reads a list of vision elements from file. If the file doesn't contain a valid list of vision elements, an error is thrown."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function listFromFile(filePath: string): VisionElement[];\n")),(0,i.yg)("h3",{id:"dictionaryfromfile"},(0,i.yg)("inlineCode",{parentName:"h3"},"dictionaryFromFile()")),(0,i.yg)("p",null,"Reads a dictionary from file. If the file doesn't contain a valid dictionary, an error is thrown."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"function dictionaryFromFile(filePath: string): Dictionary;\n")))}v.isMDXComponent=!0}}]);