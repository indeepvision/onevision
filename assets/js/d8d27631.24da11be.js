"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[4610],{481:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});var i=r(9575),t=(r(4041),r(2247));const a={sidebar_position:4},s="Records",o={unversionedId:"programming/variables-types/records",id:"programming/variables-types/records",title:"Records",description:"Just like in TypeScript, records (sometimes called dictionaries) are objects used to store collections of key-value pairs. They allow you to define and manage data where the keys are not necessarily numerical indices, but rather unique identifiers like strings or particular numbers. This is useful for associating values with specific keys, much like a dictionary associates definitions with words.",source:"@site/docs/programming/variables-types/records.md",sourceDirName:"programming/variables-types",slug:"/programming/variables-types/records",permalink:"/onevision/docs/programming/variables-types/records",draft:!1,tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"programming",previous:{title:"Interfaces",permalink:"/onevision/docs/programming/variables-types/interfaces"},next:{title:"Enums",permalink:"/onevision/docs/programming/variables-types/enums"}},c={},l=[{value:"Defining a Record",id:"defining-a-record",level:3},{value:"Initializing records on creation",id:"initializing-records-on-creation",level:3},{value:"Accessing and modifying record values",id:"accessing-and-modifying-record-values",level:3},{value:"Iterating over records",id:"iterating-over-records",level:3}],u={toc:l},d="wrapper";function p(e){let{components:n,...r}=e;return(0,t.yg)(d,(0,i.A)({},u,r,{components:n,mdxType:"MDXLayout"}),(0,t.yg)("h1",{id:"records"},"Records"),(0,t.yg)("p",null,"Just like in TypeScript, records (sometimes called dictionaries) are objects used to store collections of key-value pairs. They allow you to define and manage data where the keys are not necessarily numerical indices, but rather unique identifiers like strings or particular numbers. This is useful for associating values with specific keys, much like a dictionary associates definitions with words."),(0,t.yg)("h3",{id:"defining-a-record"},"Defining a Record"),(0,t.yg)("p",null,"You can define a dictionary in OneVision using an object type where the keys are of a specific type (",(0,t.yg)("inlineCode",{parentName:"p"},"string")," or ",(0,t.yg)("inlineCode",{parentName:"p"},"number"),") and the values can be of any type. You can easily define a dictionary with a key-value definition using the keyword ",(0,t.yg)("inlineCode",{parentName:"p"},"Record"),". For example:"),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},"// Defining a dictionary with the keys being strings and the values arrays of numbers. \nvar rec1: Record<string, number[]> = {}\n")),(0,t.yg)("p",null,"You can index a dictionary just like with arrays: "),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},'rec1["element1"] = [1,2,3,4];  \nrec1["element2"] = [5];  \nrec1["element25"] = [8,9,10];  \n')),(0,t.yg)("h3",{id:"initializing-records-on-creation"},"Initializing records on creation"),(0,t.yg)("p",null,"Records can be created by initializing an object with key-value pairs."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},'var rec2: Record<number, string> = {\n    1: "element1", \n    20: "element20"\n}; \n\nrec2[22] = "element22"; \n')),(0,t.yg)("h3",{id:"accessing-and-modifying-record-values"},"Accessing and modifying record values"),(0,t.yg)("p",null,"You can access and modify record values using the key. Adding new key-value pairs can be done by simply accessing an inexistent key."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},'var userAges: Record<string, number> = {\n    "Winston Churchill": 90,\n    "Anthony Eden": 79,\n    "Harold Macmillan": 92\n};\n\n// Accessing values\nuserAges["Winston Churchill"]; // Outputs: 30\n\n// Modifying values\nuserAges["Winston Churchill"] = 20;\nuserAges["Winston Churchill"]; // Outputs: 20\n\n// Adding new key-value pairs\nuserAges["Alec Douglas-Home"] = 92;\nuserAges["Alec Douglas-Home"]; // Outputs: 92\n\n// Deleting key-value pairs\nuserAges["Charlie"]; // Outputs: undefined\n')),(0,t.yg)("h3",{id:"iterating-over-records"},"Iterating over records"),(0,t.yg)("p",null,"You can iterate over the keys of a record using ",(0,t.yg)("inlineCode",{parentName:"p"},"Object.keys()"),"."),(0,t.yg)("pre",null,(0,t.yg)("code",{parentName:"pre",className:"language-typescript"},'var userScores: Dictionary<number> = {\n    "player1": 100,\n    "player2": 150,\n    "player3": 200\n};\n\n// Using Object.keys()\nvar keys = Object.keys(userScores); \nvar sumScores = 0; \nfor(var i=0; i<keys.length; i++){\n    sumScores = userScores[keys[i]]; \n} \n\n// Using Object.values()\nvar values = Object.values(userScores); \nvar sumScores = 0; \nfor(var i=0; i<values.length; i++){\n    sumScores = values[i]; \n} \n')))}p.isMDXComponent=!0},2247:(e,n,r)=>{r.d(n,{xA:()=>u,yg:()=>g});var i=r(4041);function t(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function a(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,i)}return r}function s(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?a(Object(r),!0).forEach((function(n){t(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function o(e,n){if(null==e)return{};var r,i,t=function(e,n){if(null==e)return{};var r,i,t={},a=Object.keys(e);for(i=0;i<a.length;i++)r=a[i],n.indexOf(r)>=0||(t[r]=e[r]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)r=a[i],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(t[r]=e[r])}return t}var c=i.createContext({}),l=function(e){var n=i.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):s(s({},n),e)),r},u=function(e){var n=l(e.components);return i.createElement(c.Provider,{value:n},e.children)},d="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},y=i.forwardRef((function(e,n){var r=e.components,t=e.mdxType,a=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=l(r),y=t,g=d["".concat(c,".").concat(y)]||d[y]||p[y]||a;return r?i.createElement(g,s(s({ref:n},u),{},{components:r})):i.createElement(g,s({ref:n},u))}));function g(e,n){var r=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=r.length,s=new Array(a);s[0]=y;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[d]="string"==typeof e?e:t,s[1]=o;for(var l=2;l<a;l++)s[l]=r[l];return i.createElement.apply(null,s)}return i.createElement.apply(null,r)}y.displayName="MDXCreateElement"}}]);