"use strict";(self.webpackChunk_indeepvision_onevision_docs=self.webpackChunk_indeepvision_onevision_docs||[]).push([[3340],{2247:(e,n,t)=>{t.d(n,{xA:()=>c,yg:()=>p});var o=t(4041);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,o,i=function(e,n){if(null==e)return{};var t,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)t=r[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=o.createContext({}),u=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},c=function(e){var n=u(e.components);return o.createElement(s.Provider,{value:n},e.children)},g="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},m=o.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),g=u(t),m=i,p=g["".concat(s,".").concat(m)]||g[m]||d[m]||r;return t?o.createElement(p,a(a({ref:n},c),{},{components:t})):o.createElement(p,a({ref:n},c))}));function p(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,a=new Array(r);a[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[g]="string"==typeof e?e:i,a[1]=l;for(var u=2;u<r;u++)a[u]=t[u];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}m.displayName="MDXCreateElement"},3279:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>d,frontMatter:()=>r,metadata:()=>l,toc:()=>u});var o=t(9575),i=(t(4041),t(2247));const r={sidebar_position:14},a="Histogram",l={unversionedId:"vision-elements/elements/histogram",id:"vision-elements/elements/histogram",title:"Histogram",description:"The Histogram class contains the complete data of an histogram. It is derived from the VisionElement base class.",source:"@site/docs/vision-elements/2_elements/14-histogram.md",sourceDirName:"vision-elements/2_elements",slug:"/vision-elements/elements/histogram",permalink:"/onevision/docs/vision-elements/elements/histogram",draft:!1,tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14},sidebar:"visionElements",previous:{title:"Ellipse2d",permalink:"/onevision/docs/vision-elements/elements/ellipse2d"},next:{title:"Image",permalink:"/onevision/docs/vision-elements/elements/image"}},s={},u=[{value:"Constructors",id:"constructors",level:2},{value:"Methods",id:"methods",level:2},{value:"<code>start()</code>",id:"start",level:3},{value:"<code>end()</code>",id:"end",level:3},{value:"<code>binWidth()</code>",id:"binwidth",level:3},{value:"<code>numBins()</code>",id:"numbins",level:3},{value:"<code>getCounts()</code>",id:"getcounts",level:3},{value:"<code>getCount()</code>",id:"getcount",level:3},{value:"<code>isValid()</code>",id:"isvalid",level:3},{value:"Props",id:"props",level:2},{value:"<code>color</code>",id:"color",level:3},{value:"<code>filled</code>",id:"filled",level:3}],c={toc:u},g="wrapper";function d(e){let{components:n,...t}=e;return(0,i.yg)(g,(0,o.A)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("h1",{id:"histogram"},"Histogram"),(0,i.yg)("p",null,"The ",(0,i.yg)("strong",{parentName:"p"},"Histogram")," class contains the complete data of an histogram. It is derived from the ",(0,i.yg)("a",{parentName:"p",href:"./vision-element"},"VisionElement")," base class."),(0,i.yg)("h2",{id:"constructors"},"Constructors"),(0,i.yg)("p",null,"Empty constructor."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"new Histogram(): Histogram;\n")),(0,i.yg)("p",null,"Constructor with the initial values of the histogram. Each element of the array is a bin that contains the counts, or frequency of the value of the bin.\nThe start value will be 0, the end value is the length of the array minus 1, and the bin width is 1."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"new Histogram(values: number[]): Histogram;\n")),(0,i.yg)("h2",{id:"methods"},"Methods"),(0,i.yg)("h3",{id:"start"},(0,i.yg)("inlineCode",{parentName:"h3"},"start()")),(0,i.yg)("p",null,"Returns the value of the first bin of the histogram."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"start(): number;\n")),(0,i.yg)("h3",{id:"end"},(0,i.yg)("inlineCode",{parentName:"h3"},"end()")),(0,i.yg)("p",null,"Returns the value of the last bin of the histogram."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"end(): number;\n")),(0,i.yg)("h3",{id:"binwidth"},(0,i.yg)("inlineCode",{parentName:"h3"},"binWidth()")),(0,i.yg)("p",null,"Returns the width of each bin."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"binWidth(): number;\n")),(0,i.yg)("h3",{id:"numbins"},(0,i.yg)("inlineCode",{parentName:"h3"},"numBins()")),(0,i.yg)("p",null,"Returns the number of bins."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"numBins(): number;\n")),(0,i.yg)("h3",{id:"getcounts"},(0,i.yg)("inlineCode",{parentName:"h3"},"getCounts()")),(0,i.yg)("p",null,"Returns the list of histogram counts for all bins. The counts are the frequency of the value of the bin."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"getCounts(): number[];\n")),(0,i.yg)("h3",{id:"getcount"},(0,i.yg)("inlineCode",{parentName:"h3"},"getCount()")),(0,i.yg)("p",null,"Returns the histogram count at the given bin index."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"getCount(index: number): number;\n")),(0,i.yg)("h3",{id:"isvalid"},(0,i.yg)("inlineCode",{parentName:"h3"},"isValid()")),(0,i.yg)("p",null,"Returns ",(0,i.yg)("inlineCode",{parentName:"p"},"true")," if the histogram values are valid."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"isValid(): boolean;\n")),(0,i.yg)("h2",{id:"props"},"Props"),(0,i.yg)("h3",{id:"color"},(0,i.yg)("inlineCode",{parentName:"h3"},"color")),(0,i.yg)("p",null,"The color of the line and filling of the histogram in hexadecimal format."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"color: string;\n")),(0,i.yg)("h3",{id:"filled"},(0,i.yg)("inlineCode",{parentName:"h3"},"filled")),(0,i.yg)("p",null,"If ",(0,i.yg)("inlineCode",{parentName:"p"},"true"),", the histogram will be filled with the color."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-onevision"},"filled: boolean;\n")))}d.isMDXComponent=!0}}]);